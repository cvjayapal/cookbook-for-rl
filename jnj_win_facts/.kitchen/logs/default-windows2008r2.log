I, [2016-11-29T06:07:51.604615 #4556]  INFO -- default-windows2008r2: -----> Creating <default-windows2008r2>...
I, [2016-11-29T06:08:05.829936 #4556]  INFO -- default-windows2008r2: Bringing machine 'default' up with 'virtualbox' provider...
I, [2016-11-29T06:08:07.536857 #4556]  INFO -- default-windows2008r2: ==> default: Machine not provisioned because `--no-provision` is specified.
I, [2016-11-29T06:08:24.529816 #4556]  INFO -- default-windows2008r2: [WinRM] Established
I, [2016-11-29T06:08:24.535680 #4556]  INFO -- default-windows2008r2: 
I, [2016-11-29T06:08:24.612986 #4556]  INFO -- default-windows2008r2: Vagrant instance <default-windows2008r2> created.
I, [2016-11-29T06:08:24.630511 #4556]  INFO -- default-windows2008r2: Finished creating <default-windows2008r2> (0m33.01s).
I, [2016-11-29T06:08:24.630511 #4556]  INFO -- default-windows2008r2: -----> Converging <default-windows2008r2>...
I, [2016-11-29T06:08:24.635399 #4556]  INFO -- default-windows2008r2: Preparing files for transfer
I, [2016-11-29T06:08:24.636377 #4556]  INFO -- default-windows2008r2: Preparing dna.json
I, [2016-11-29T06:08:24.656990 #4556]  INFO -- default-windows2008r2: Preparing current project directory as a cookbook
I, [2016-11-29T06:08:24.757631 #4556]  INFO -- default-windows2008r2: Removing non-cookbook files before transfer
I, [2016-11-29T06:08:24.850503 #4556]  INFO -- default-windows2008r2: Preparing data_bags
I, [2016-11-29T06:08:24.854391 #4556]  INFO -- default-windows2008r2: Preparing solo.rb
I, [2016-11-29T06:08:25.806613 #4556]  INFO -- default-windows2008r2: -----> Installing Chef Omnibus (install only if missing)
I, [2016-11-29T06:08:34.712686 #4556]  INFO -- default-windows2008r2: Downloading package from https://packages.chef.io/files/stable/chef/12.16.42/windows/2012r2/chef-client-12.16.42-1-x64.msi
I, [2016-11-29T06:22:12.988720 #4556]  INFO -- default-windows2008r2: Download complete.
I, [2016-11-29T06:22:13.969272 #4556]  INFO -- default-windows2008r2: Successfully verified C:\Users\vagrant\AppData\Local\Temp\chef-client-12.16.42-1-x64.msi
I, [2016-11-29T06:22:14.019128 #4556]  INFO -- default-windows2008r2: Installing Chef Omnibus package C:\Users\vagrant\AppData\Local\Temp\chef-client-12.16.42-1-x64.msi
I, [2016-11-29T06:24:17.042166 #4556]  INFO -- default-windows2008r2: Installation complete
I, [2016-11-29T06:24:18.609367 #4556]  INFO -- default-windows2008r2: Transferring files to <default-windows2008r2>
I, [2016-11-29T06:24:54.513024 #4556]  INFO -- default-windows2008r2: Starting Chef Client, version 12.16.42
I, [2016-11-29T06:25:53.034217 #4556]  INFO -- default-windows2008r2: Creating a new client identity for default-windows2008r2 using the validator key.
I, [2016-11-29T06:25:53.037166 #4556]  INFO -- default-windows2008r2: resolving cookbooks for run list: ["jnj_win_facts"]
I, [2016-11-29T06:25:53.040100 #4556]  INFO -- default-windows2008r2: Synchronizing Cookbooks:
I, [2016-11-29T06:25:53.043033 #4556]  INFO -- default-windows2008r2:   - jnj_win_facts (0.1.0)
I, [2016-11-29T06:25:53.045965 #4556]  INFO -- default-windows2008r2: Installing Cookbook Gems:
I, [2016-11-29T06:25:53.047921 #4556]  INFO -- default-windows2008r2: Compiling Cookbooks...
I, [2016-11-29T06:25:53.051814 #4556]  INFO -- default-windows2008r2: Converging 6 resources
I, [2016-11-29T06:25:53.054745 #4556]  INFO -- default-windows2008r2: Recipe: jnj_win_facts::default
I, [2016-11-29T06:25:53.057696 #4556]  INFO -- default-windows2008r2:   * directory[C:\ProgramData] action create (up to date)
I, [2016-11-29T06:25:53.059651 #4556]  INFO -- default-windows2008r2:   * directory[C:\ProgramData\PuppetLabs] action create
I, [2016-11-29T06:25:53.062585 #4556]  INFO -- default-windows2008r2:     - create new directory C:\ProgramData\PuppetLabs
I, [2016-11-29T06:25:53.065518 #4556]  INFO -- default-windows2008r2:     - change group
I, [2016-11-29T06:25:53.068433 #4556]  INFO -- default-windows2008r2:   * directory[C:\ProgramData\PuppetLabs\facter] action create
I, [2016-11-29T06:25:53.072342 #4556]  INFO -- default-windows2008r2:     - create new directory C:\ProgramData\PuppetLabs\facter
I, [2016-11-29T06:25:53.075276 #4556]  INFO -- default-windows2008r2:     - change group
I, [2016-11-29T06:25:53.078207 #4556]  INFO -- default-windows2008r2:   * directory[C:\ProgramData\PuppetLabs\facter\facts.d] action create
I, [2016-11-29T06:25:53.081142 #4556]  INFO -- default-windows2008r2:     - create new directory C:\ProgramData\PuppetLabs\facter\facts.d
I, [2016-11-29T06:25:53.084073 #4556]  INFO -- default-windows2008r2:     - change group
I, [2016-11-29T06:25:53.088961 #4556]  INFO -- default-windows2008r2:   * cookbook_file[C:\ProgramData\PuppetLabs\facter\facts.d\scm_facts.ps1] action create
I, [2016-11-29T06:25:53.091894 #4556]  INFO -- default-windows2008r2:     - create new file C:\ProgramData\PuppetLabs\facter\facts.d\scm_facts.ps1
I, [2016-11-29T06:25:53.094842 #4556]  INFO -- default-windows2008r2:     - update content in file C:\ProgramData\PuppetLabs\facter\facts.d\scm_facts.ps1 from none to 624f68
I, [2016-11-29T06:25:53.098739 #4556]  INFO -- default-windows2008r2:     --- C:\ProgramData\PuppetLabs\facter\facts.d\scm_facts.ps1	2016-11-28 16:55:49.000000000 -0800
I, [2016-11-29T06:25:53.101672 #4556]  INFO -- default-windows2008r2:     +++ C:\ProgramData\PuppetLabs\facter\facts.d/chef-scm_facts20161128-1260-gelgd5.ps1	2016-11-28 16:55:49.000000000 -0800
I, [2016-11-29T06:25:53.103627 #4556]  INFO -- default-windows2008r2:     @@ -1 +1,885 @@
I, [2016-11-29T06:25:53.106559 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.109491 #4556]  INFO -- default-windows2008r2:     +# NAME:   scm_facts.ps1
I, [2016-11-29T06:25:53.112426 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.114381 #4556]  INFO -- default-windows2008r2:     +# AUTHOR: Robert Laskowski & Brian Hurley
I, [2016-11-29T06:25:53.117312 #4556]  INFO -- default-windows2008r2:     +# DATE :  11/15/2015
I, [2016-11-29T06:25:53.120244 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.123179 #4556]  INFO -- default-windows2008r2:     +# This script collects the facts about the system based on the avaialable metadata and sets
I, [2016-11-29T06:25:53.127090 #4556]  INFO -- default-windows2008r2:     +# local environment variables and puppet facts
I, [2016-11-29T06:25:53.130040 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.132954 #4556]  INFO -- default-windows2008r2:     +# SYNTAX: scm_facts.ps1
I, [2016-11-29T06:25:53.136864 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.140775 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.144685 #4556]  INFO -- default-windows2008r2:     +#$VerbosePreference = "continue"
I, [2016-11-29T06:25:53.156419 #4556]  INFO -- default-windows2008r2:     +$JnJFolder  = "C:\ProgramData\JnJ"
I, [2016-11-29T06:25:53.159352 #4556]  INFO -- default-windows2008r2:     +$nullvar    = "NotSet"
I, [2016-11-29T06:25:53.163260 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.166213 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.169146 #4556]  INFO -- default-windows2008r2:     +#  Function: RunningAsAdministrator
I, [2016-11-29T06:25:53.171100 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: ALL
I, [2016-11-29T06:25:53.175011 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.176966 #4556]  INFO -- default-windows2008r2:     +#  Determines who is running this script, if exectuted in required Windows Administrator mode
I, [2016-11-29T06:25:53.179899 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.182815 #4556]  INFO -- default-windows2008r2:     +#  na\admin_bhurley is sometimes in Administrator mode. Localhost\AdminNCS is always.
I, [2016-11-29T06:25:53.185765 #4556]  INFO -- default-windows2008r2:     +#  Built-in Local System Account ("NT AUTHORITY\System") is more powerful than Administrator.
I, [2016-11-29T06:25:53.187722 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.190652 #4556]  INFO -- default-windows2008r2:     +#  Mandatory Integrity Control (MIC) was added in Windows Server 2008
I, [2016-11-29T06:25:53.194546 #4556]  INFO -- default-windows2008r2:     +#     SID: S-1-16-12288
I, [2016-11-29T06:25:53.197478 #4556]  INFO -- default-windows2008r2:     +#     Name: High Mandatory Integrity Level   (only System has higher level of trustworthiness)
I, [2016-11-29T06:25:53.200411 #4556]  INFO -- default-windows2008r2:     +#     Description: A high integrity level.
I, [2016-11-29T06:25:53.203362 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.206275 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.209224 #4556]  INFO -- default-windows2008r2:     +function RunningAsAdministrator()
I, [2016-11-29T06:25:53.212142 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:53.216051 #4556]  INFO -- default-windows2008r2:     +  $ScriptRunner = ""
I, [2016-11-29T06:25:53.218984 #4556]  INFO -- default-windows2008r2:     +  $ScriptRunner = (Invoke-Expression "whoami")
I, [2016-11-29T06:25:53.222895 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.225850 #4556]  INFO -- default-windows2008r2:     +  $ScriptRunnersMode = ""
I, [2016-11-29T06:25:53.228762 #4556]  INFO -- default-windows2008r2:     +  $ScriptRunnersMode = (Invoke-Expression "whoami /groups | findstr /i /l S-1-16-12288  ")
I, [2016-11-29T06:25:53.231697 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.234646 #4556]  INFO -- default-windows2008r2:     +  If ($ScriptRunnersMode)
I, [2016-11-29T06:25:53.237579 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.240495 #4556]  INFO -- default-windows2008r2:     +    write-log "Script executed by $ScriptRunner running in Windows Administrator mode."
I, [2016-11-29T06:25:53.242449 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.245399 #4556]  INFO -- default-windows2008r2:     +  Else
I, [2016-11-29T06:25:53.248332 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.251266 #4556]  INFO -- default-windows2008r2:     +    write-log "Script executed  $ScriptRunner is NOT running in Windows Administrator mode."
I, [2016-11-29T06:25:53.253220 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.256153 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:53.259086 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.261041 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.264933 #4556]  INFO -- default-windows2008r2:     +#  Function: write-log
I, [2016-11-29T06:25:53.267866 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: ALL
I, [2016-11-29T06:25:53.269822 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.272755 #4556]  INFO -- default-windows2008r2:     +function write-log ($message)
I, [2016-11-29T06:25:53.276665 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:53.279599 #4556]  INFO -- default-windows2008r2:     +  Write-Host $message
I, [2016-11-29T06:25:53.282531 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:53.285464 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.288397 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.292306 #4556]  INFO -- default-windows2008r2:     +#  Function: StringIsNullOrBlank()
I, [2016-11-29T06:25:53.297214 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: All
I, [2016-11-29T06:25:53.299168 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.302101 #4556]  INFO -- default-windows2008r2:     +#  This StringIsNullOrBlank() function Determines is the input $string is null or empty
I, [2016-11-29T06:25:53.305034 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:53.307948 #4556]  INFO -- default-windows2008r2:     +function StringIsNullOrBlank([string]$string)
I, [2016-11-29T06:25:53.311880 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:53.314791 #4556]  INFO -- default-windows2008r2:     +  try
I, [2016-11-29T06:25:53.317744 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.320676 #4556]  INFO -- default-windows2008r2:     +    return [string]::IsNullOrWhiteSpace($string)
I, [2016-11-29T06:25:53.323592 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.326524 #4556]  INFO -- default-windows2008r2:     +  catch
I, [2016-11-29T06:25:53.329475 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.332388 #4556]  INFO -- default-windows2008r2:     +    $Error.Clear()
I, [2016-11-29T06:25:53.335322 #4556]  INFO -- default-windows2008r2:     +    return [string]::IsNullOrEmpty($string)
I, [2016-11-29T06:25:53.338273 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.341188 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:53.344119 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.347054 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.350005 #4556]  INFO -- default-windows2008r2:     +#  Function: CallAPI()
I, [2016-11-29T06:25:53.352937 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: All
I, [2016-11-29T06:25:53.354893 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.357807 #4556]  INFO -- default-windows2008r2:     +#  This CallAPI() function uses Invoke-WebRequest command to fetch content from given URL.
I, [2016-11-29T06:25:53.360741 #4556]  INFO -- default-windows2008r2:     +#    Invoke-WebRequest requires PowerShell 4 or above.  In the event (Windows 2008) when PS5
I, [2016-11-29T06:25:53.363674 #4556]  INFO -- default-windows2008r2:     +#    is not available, this function will fall back to using curl.exe.
I, [2016-11-29T06:25:53.365628 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.368561 #4556]  INFO -- default-windows2008r2:     +#  URL Content is returned as String.
I, [2016-11-29T06:25:53.371493 #4556]  INFO -- default-windows2008r2:     +#    Normalized to remove CR and trailing spaces.
I, [2016-11-29T06:25:53.373449 #4556]  INFO -- default-windows2008r2:     +#    404 Status returns "404 - Not Found" string
I, [2016-11-29T06:25:53.376401 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:53.379333 #4556]  INFO -- default-windows2008r2:     +$ErrorNotFound = "404 - Not Found"
I, [2016-11-29T06:25:53.382266 #4556]  INFO -- default-windows2008r2:     +function CallAPI($apiURL, [bool]$critical = $false)
I, [2016-11-29T06:25:53.384221 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:53.387155 #4556]  INFO -- default-windows2008r2:     +  write-log "Calling $apiURL"
I, [2016-11-29T06:25:53.390087 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.392043 #4556]  INFO -- default-windows2008r2:     +  $try = 0
I, [2016-11-29T06:25:53.394975 #4556]  INFO -- default-windows2008r2:     +  while (1)
I, [2016-11-29T06:25:53.397907 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.399845 #4556]  INFO -- default-windows2008r2:     +    Try
I, [2016-11-29T06:25:53.402778 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.405711 #4556]  INFO -- default-windows2008r2:     +      if (Get-Command Invoke-WebRequest -errorAction SilentlyContinue)
I, [2016-11-29T06:25:53.407666 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:53.410617 #4556]  INFO -- default-windows2008r2:     +        [string]$apiData=(Invoke-WebRequest -Uri $apiURL -TimeoutSec 60 -UseBasicParsing).Content;
I, [2016-11-29T06:25:53.414509 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:53.417442 #4556]  INFO -- default-windows2008r2:     +      else
I, [2016-11-29T06:25:53.419397 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:53.422330 #4556]  INFO -- default-windows2008r2:     +        [string]$apidata = & 'C:\Windows\curl.exe' -s @($apiURL)
I, [2016-11-29T06:25:53.425263 #4556]  INFO -- default-windows2008r2:     +        if ($apidata -like "*$($ErrorNotFound)*")
I, [2016-11-29T06:25:53.427218 #4556]  INFO -- default-windows2008r2:     +        {
I, [2016-11-29T06:25:53.430169 #4556]  INFO -- default-windows2008r2:     +          return $ErrorNotFound
I, [2016-11-29T06:25:53.433103 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:53.435057 #4556]  INFO -- default-windows2008r2:     +        else
I, [2016-11-29T06:25:53.437990 #4556]  INFO -- default-windows2008r2:     +        {
I, [2016-11-29T06:25:53.440923 #4556]  INFO -- default-windows2008r2:     +          $apidata = $apidata.Trim().Replace(" ", "`n")
I, [2016-11-29T06:25:53.443839 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:53.446769 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:53.449702 #4556]  INFO -- default-windows2008r2:     +      if($critical -eq $false -or (StringIsNullOrBlank $apiData) -eq $false) {
I, [2016-11-29T06:25:53.452654 #4556]  INFO -- default-windows2008r2:     +        $apiData = $apiData.Trim().Replace("`r", "`n").Replace("`n`n", "`n")
I, [2016-11-29T06:25:53.454610 #4556]  INFO -- default-windows2008r2:     +        if(!($apiData -like "*ERROR*")) {
I, [2016-11-29T06:25:53.457542 #4556]  INFO -- default-windows2008r2:     +            return $apiData
I, [2016-11-29T06:25:53.460456 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:53.463388 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:53.466321 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.469256 #4556]  INFO -- default-windows2008r2:     +    Catch
I, [2016-11-29T06:25:53.472189 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.475120 #4556]  INFO -- default-windows2008r2:     +      $Error.Clear()
I, [2016-11-29T06:25:53.478055 #4556]  INFO -- default-windows2008r2:     +      if ($_.Exception.Response.StatusCode.Value__ -eq 404)
I, [2016-11-29T06:25:53.481002 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:53.483939 #4556]  INFO -- default-windows2008r2:     +        return $ErrorNotFound
I, [2016-11-29T06:25:53.486852 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:53.490762 #4556]  INFO -- default-windows2008r2:     +      write-log "Error calling $apiURL. $_"
I, [2016-11-29T06:25:53.495653 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.498603 #4556]  INFO -- default-windows2008r2:     +      # TEMPORARY
I, [2016-11-29T06:25:53.501536 #4556]  INFO -- default-windows2008r2:     +      # Azure API change
I, [2016-11-29T06:25:53.504451 #4556]  INFO -- default-windows2008r2:     +      # Error: "All the required parameters were not specified to call the API. Please make sure that values for following parameters are present in the url pattern or query string:
I, [2016-11-29T06:25:53.507383 #4556]  INFO -- default-windows2008r2:     +      #           Required parameters:['ipaddress']optional parameters:[]
I, [2016-11-29T06:25:53.510314 #4556]  INFO -- default-windows2008r2:     +      #           default values for optional parameters:[]"
I, [2016-11-29T06:25:53.514227 #4556]  INFO -- default-windows2008r2:     +      if ($HostingPlatform -eq 'AZR')
I, [2016-11-29T06:25:53.518157 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:53.521069 #4556]  INFO -- default-windows2008r2:     +        $errText = $_.Exception.Message
I, [2016-11-29T06:25:53.524020 #4556]  INFO -- default-windows2008r2:     +        if ($errText -like '*Bad Request*' -or $errText -like '*ipaddress*')
I, [2016-11-29T06:25:53.527914 #4556]  INFO -- default-windows2008r2:     +        {
I, [2016-11-29T06:25:53.530847 #4556]  INFO -- default-windows2008r2:     +          # Call URL again with old ipaddress parameter
I, [2016-11-29T06:25:53.533779 #4556]  INFO -- default-windows2008r2:     +          $apiURL = $apiURL.replace("?ip_address", "?ipaddress")
I, [2016-11-29T06:25:53.536710 #4556]  INFO -- default-windows2008r2:     +          write-log ("API Error: Retrying with URL - " + $apiURL)
I, [2016-11-29T06:25:53.539643 #4556]  INFO -- default-windows2008r2:     +          return CallAPI $apiURL $critical
I, [2016-11-29T06:25:53.542578 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:53.545511 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:53.548443 #4556]  INFO -- default-windows2008r2:     +      # TEMPORARY
I, [2016-11-29T06:25:53.552353 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.555285 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.558240 #4556]  INFO -- default-windows2008r2:     +    if ($critical)
I, [2016-11-29T06:25:53.562148 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.565081 #4556]  INFO -- default-windows2008r2:     +      if ( $try++ -ge 5 )
I, [2016-11-29T06:25:53.567996 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:53.570929 #4556]  INFO -- default-windows2008r2:     +        write-log "Unable to invoke API URL - $apiURL"
I, [2016-11-29T06:25:53.574839 #4556]  INFO -- default-windows2008r2:     +        return $ErrorNotFound
I, [2016-11-29T06:25:53.577787 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:53.580705 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.583636 #4556]  INFO -- default-windows2008r2:     +    else
I, [2016-11-29T06:25:53.586571 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.597339 #4556]  INFO -- default-windows2008r2:     +      break
I, [2016-11-29T06:25:53.600255 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.603209 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.606124 #4556]  INFO -- default-windows2008r2:     +    write-log "Retrying $apiURL after 1 second..."
I, [2016-11-29T06:25:53.609073 #4556]  INFO -- default-windows2008r2:     +    start-sleep -s 1
I, [2016-11-29T06:25:53.611989 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.616875 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.619808 #4556]  INFO -- default-windows2008r2:     +  # not found response
I, [2016-11-29T06:25:53.621764 #4556]  INFO -- default-windows2008r2:     +  return $ErrorNotFound
I, [2016-11-29T06:25:53.624696 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:53.628608 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.631541 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.642295 #4556]  INFO -- default-windows2008r2:     +# *********************************************************************************************
I, [2016-11-29T06:25:53.646206 #4556]  INFO -- default-windows2008r2:     +#  Function: getCreds()
I, [2016-11-29T06:25:53.648160 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: AWS Only
I, [2016-11-29T06:25:53.651093 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.654026 #4556]  INFO -- default-windows2008r2:     +#  This getCreds() function Determines is the server has IMA role attached.
I, [2016-11-29T06:25:53.656959 #4556]  INFO -- default-windows2008r2:     +#    IF IAM Role attached function is skipped
I, [2016-11-29T06:25:53.659892 #4556]  INFO -- default-windows2008r2:     +#    IF no IAM Role attadhed curl is used to retrieve AWS Access Key & Secret from xbot metadata
I, [2016-11-29T06:25:53.661847 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.664781 #4556]  INFO -- default-windows2008r2:     +#  Function then creates 1 directory (.aws), 1 file therein (config), and writes 4-line content:
I, [2016-11-29T06:25:53.667731 #4556]  INFO -- default-windows2008r2:     +#   C:\Users\admin_bhurley\.aws\config
I, [2016-11-29T06:25:53.670663 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.672618 #4556]  INFO -- default-windows2008r2:     +#   [default]
I, [2016-11-29T06:25:53.676532 #4556]  INFO -- default-windows2008r2:     +#   aws_access_key_id = AKxxxxxxxxxxxxxxxxxxx
I, [2016-11-29T06:25:53.679465 #4556]  INFO -- default-windows2008r2:     +#   output = text
I, [2016-11-29T06:25:53.682397 #4556]  INFO -- default-windows2008r2:     +#   aws_secret_access_key = 7Jyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
I, [2016-11-29T06:25:53.685327 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:53.688261 #4556]  INFO -- default-windows2008r2:     +function getCreds()
I, [2016-11-29T06:25:53.690215 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:53.694107 #4556]  INFO -- default-windows2008r2:     +  write-log "Calling get-creds"
I, [2016-11-29T06:25:53.696063 #4556]  INFO -- default-windows2008r2:     +  if ($InstanceRole -eq "none")   #RLEDIT - add logic to ensure environment is AWS
I, [2016-11-29T06:25:53.698997 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.701930 #4556]  INFO -- default-windows2008r2:     +    #write-log "VPCPrefix environment variable in getcreds() is: "$env:vpcxprefix
I, [2016-11-29T06:25:53.703884 #4556]  INFO -- default-windows2008r2:     +    #write-log "VPCPrefix variable in getcreds() is: $vpcxprefix"
I, [2016-11-29T06:25:53.706835 #4556]  INFO -- default-windows2008r2:     +    write-log "Server IAM Role is none. Executing getCreds function."
I, [2016-11-29T06:25:53.710726 #4556]  INFO -- default-windows2008r2:     +    $apiURL = "http://" + $vpcxprefix + "api.vpcx.jnj.com/account/metric-reporter?ip_address=" + $IPAddress
I, [2016-11-29T06:25:53.714637 #4556]  INFO -- default-windows2008r2:     +    [string]$apidata = CallAPI $apiURL $true
I, [2016-11-29T06:25:53.717589 #4556]  INFO -- default-windows2008r2:     +    if ($apidata -ne $ErrorNotFound)
I, [2016-11-29T06:25:53.719545 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.722477 #4556]  INFO -- default-windows2008r2:     +      $apidataSplit = $apidata.Split("`n")
I, [2016-11-29T06:25:53.725412 #4556]  INFO -- default-windows2008r2:     +      $AWSAccessKeyId = $apidataSplit[0]
I, [2016-11-29T06:25:53.728325 #4556]  INFO -- default-windows2008r2:     +      $AWSSecretKey = $apidataSplit[1]
I, [2016-11-29T06:25:53.731276 #4556]  INFO -- default-windows2008r2:     +      $AWSAccessKeyId = $apidataSplit[0].Replace("AWSAccessKeyId=", "")
I, [2016-11-29T06:25:53.733231 #4556]  INFO -- default-windows2008r2:     +      $AWSSecretKey =$apidataSplit[1].Replace("AWSSecretKey=", "")
I, [2016-11-29T06:25:53.736164 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.739079 #4556]  INFO -- default-windows2008r2:     +      # Use cli to configure, configuration already exists by bootstrap. Update the pieces needed.
I, [2016-11-29T06:25:53.742010 #4556]  INFO -- default-windows2008r2:     +      $AWSCLI='C:\Program Files\Amazon\AWSCLI\aws.exe'
I, [2016-11-29T06:25:53.745922 #4556]  INFO -- default-windows2008r2:     +      &$AWSCLI configure set aws_access_key_id $AWSAccessKeyId
I, [2016-11-29T06:25:53.748855 #4556]  INFO -- default-windows2008r2:     +      &$AWSCLI configure set aws_secret_access_key $AWSSecretKey
I, [2016-11-29T06:25:53.751806 #4556]  INFO -- default-windows2008r2:     +      &$AWSCLI configure set output text
I, [2016-11-29T06:25:53.753743 #4556]  INFO -- default-windows2008r2:     +      &$AWSCLI configure set region $Region
I, [2016-11-29T06:25:53.756676 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.759610 #4556]  INFO -- default-windows2008r2:     +    else
I, [2016-11-29T06:25:53.762559 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.765473 #4556]  INFO -- default-windows2008r2:     +      write-log "AWS Credentials not found. Response $apidata"
I, [2016-11-29T06:25:53.768405 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.771338 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.775250 #4556]  INFO -- default-windows2008r2:     +  else
I, [2016-11-29T06:25:53.778181 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.781117 #4556]  INFO -- default-windows2008r2:     +    write-log "Server IAM Role is $InstanceRole. Skipping getCreds function."
I, [2016-11-29T06:25:53.784049 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.787958 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:53.790893 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.794808 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:53.797734 #4556]  INFO -- default-windows2008r2:     +#  Define function: getTags()
I, [2016-11-29T06:25:53.799691 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: AWS, Azure(to be implemented)
I, [2016-11-29T06:25:53.802642 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.805574 #4556]  INFO -- default-windows2008r2:     +#  Using Hosting Platform API retriews the tags assigned to the server instance
I, [2016-11-29T06:25:53.809467 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.813379 #4556]  INFO -- default-windows2008r2:     +#  Creates 1 file "$currentDir\instance_tags.txt" with following 5 tab-delimited fields:
I, [2016-11-29T06:25:53.816311 #4556]  INFO -- default-windows2008r2:     +#    TAGS  Name  i-780f8d89  instance
I, [2016-11-29T06:25:53.819243 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:53.822176 #4556]  INFO -- default-windows2008r2:     +function getTags()
I, [2016-11-29T06:25:53.825108 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:53.828061 #4556]  INFO -- default-windows2008r2:     +  write-log "Calling get-tags"
I, [2016-11-29T06:25:53.830015 #4556]  INFO -- default-windows2008r2:     +  #write-log "Region environment variable in getTags() is: "$env:aws_region
I, [2016-11-29T06:25:53.833906 #4556]  INFO -- default-windows2008r2:     +  #write-log "Region Global variable in getTags() is: $Region"
I, [2016-11-29T06:25:53.837816 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.841727 #4556]  INFO -- default-windows2008r2:     +  $awsResult = powershell -command "& {&'C:\Program Files\Amazon\AWSCLI\aws.exe' --region $Region ec2 describe-tags --filter 'Name=resource-id,Values=$InstanceID' --output text > $JnJFolder\SCM_facts_log\instance_tags.txt}" 2>&1
I, [2016-11-29T06:25:53.844659 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.847594 #4556]  INFO -- default-windows2008r2:     +  write-log "Describe Tags response: $awsResult"
I, [2016-11-29T06:25:53.850545 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:53.852500 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.855416 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:53.858347 #4556]  INFO -- default-windows2008r2:     +#  Define function: getEnvironmentFromRole()
I, [2016-11-29T06:25:53.862257 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: AWS, Azure
I, [2016-11-29T06:25:53.865189 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:53.868123 #4556]  INFO -- default-windows2008r2:     +#  Using IAM Role (AWS) or Resource Group (AZR)  produce the puppet environment name
I, [2016-11-29T06:25:53.871077 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:53.873991 #4556]  INFO -- default-windows2008r2:     +function getEnvironmentFromRole([string] $Account, [string] $Role, $RolePartsLen, $IndexBranch)
I, [2016-11-29T06:25:53.876921 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:53.879873 #4556]  INFO -- default-windows2008r2:     +  # AWS 'IAM Role' looks like 'itx-021-app-apdevelopment-developmentRole-VZBYXI5XE9A'
I, [2016-11-29T06:25:53.882787 #4556]  INFO -- default-windows2008r2:     +  # Azure 'resourcegroup' looks like 'AZR-ABP-xbot-Production'   (-app-  or -scm- parts not present)
I, [2016-11-29T06:25:53.885719 #4556]  INFO -- default-windows2008r2:     +  # OPC 'role' looks like 'OPC-account-app-branch'   (-app-  or -scm- parts not present)
I, [2016-11-29T06:25:53.888654 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.891586 #4556]  INFO -- default-windows2008r2:     +  $parts=$Role.Split('-')
I, [2016-11-29T06:25:53.894518 #4556]  INFO -- default-windows2008r2:     +  if ($parts.length -ne $RolePartsLen)
I, [2016-11-29T06:25:53.897455 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.899408 #4556]  INFO -- default-windows2008r2:     +    $Role="none"
I, [2016-11-29T06:25:53.902339 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.905272 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:53.908215 #4556]  INFO -- default-windows2008r2:     +  if ($Role -eq "none")
I, [2016-11-29T06:25:53.912116 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.916028 #4556]  INFO -- default-windows2008r2:     +    $Application="UnManagedApplication"
I, [2016-11-29T06:25:53.919936 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.921911 #4556]  INFO -- default-windows2008r2:     +  elseif ($parts.length -eq $RolePartsLen)
I, [2016-11-29T06:25:53.924824 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.928737 #4556]  INFO -- default-windows2008r2:     +    $AppOrSCM=$parts[2]
I, [2016-11-29T06:25:53.930692 #4556]  INFO -- default-windows2008r2:     +    $IndexApp = $IndexBranch - 1
I, [2016-11-29T06:25:53.934603 #4556]  INFO -- default-windows2008r2:     +    $AppBranch=$parts[$IndexBranch].TrimEnd("Role")
I, [2016-11-29T06:25:53.937536 #4556]  INFO -- default-windows2008r2:     +    if ($parts[$IndexApp] -eq "itscore")
I, [2016-11-29T06:25:53.940468 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.943399 #4556]  INFO -- default-windows2008r2:     +      $Application="its_core"
I, [2016-11-29T06:25:53.946334 #4556]  INFO -- default-windows2008r2:     +      $Environment=$Application + "_" + $AppBranch
I, [2016-11-29T06:25:53.948307 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.951222 #4556]  INFO -- default-windows2008r2:     +    elseif ($parts[$IndexApp] -eq "itscorepuppetmaster")
I, [2016-11-29T06:25:53.953177 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.956110 #4556]  INFO -- default-windows2008r2:     +      $Application="its_core_puppetmaster"
I, [2016-11-29T06:25:53.960019 #4556]  INFO -- default-windows2008r2:     +      $Environment=$Application + "_" + $AppBranch
I, [2016-11-29T06:25:53.962952 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.965906 #4556]  INFO -- default-windows2008r2:     +    else
I, [2016-11-29T06:25:53.968837 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:53.970792 #4556]  INFO -- default-windows2008r2:     +      $Application=$parts[$IndexApp]
I, [2016-11-29T06:25:53.973725 #4556]  INFO -- default-windows2008r2:     +      $Environment=$parts[0] + "_" + $parts[1] + "_" + $Application + "_" + $AppBranch
I, [2016-11-29T06:25:53.976661 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:53.979587 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.982524 #4556]  INFO -- default-windows2008r2:     +  else
I, [2016-11-29T06:25:53.985439 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:53.989347 #4556]  INFO -- default-windows2008r2:     +    $Application="WrongApplication"
I, [2016-11-29T06:25:53.993260 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:53.996192 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.001080 #4556]  INFO -- default-windows2008r2:     +  # default to production for unmanaged application
I, [2016-11-29T06:25:54.004013 #4556]  INFO -- default-windows2008r2:     +  # development for DVL
I, [2016-11-29T06:25:54.006946 #4556]  INFO -- default-windows2008r2:     +  if ($Application -eq "UnManagedApplication" -or $Application -eq "WrongApplication")
I, [2016-11-29T06:25:54.009877 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.012832 #4556]  INFO -- default-windows2008r2:     +    # AppBranch
I, [2016-11-29T06:25:54.015743 #4556]  INFO -- default-windows2008r2:     +    if ($Account.StartsWith("0"))
I, [2016-11-29T06:25:54.018676 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.020631 #4556]  INFO -- default-windows2008r2:     +      $AppBranch="development"
I, [2016-11-29T06:25:54.023583 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.026499 #4556]  INFO -- default-windows2008r2:     +    else
I, [2016-11-29T06:25:54.029449 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.032383 #4556]  INFO -- default-windows2008r2:     +      $AppBranch="production"
I, [2016-11-29T06:25:54.059738 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.062670 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.065622 #4556]  INFO -- default-windows2008r2:     +    # Environment
I, [2016-11-29T06:25:54.067577 #4556]  INFO -- default-windows2008r2:     +    $Environment="its_core_" + $AppBranch
I, [2016-11-29T06:25:54.070491 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.073442 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.076356 #4556]  INFO -- default-windows2008r2:     +  $EnvironmentInfo = @{}
I, [2016-11-29T06:25:54.079291 #4556]  INFO -- default-windows2008r2:     +  $EnvironmentInfo['AppOrSCM']    = $AppOrSCM
I, [2016-11-29T06:25:54.083198 #4556]  INFO -- default-windows2008r2:     +  $EnvironmentInfo['Application'] = $Application
I, [2016-11-29T06:25:54.086132 #4556]  INFO -- default-windows2008r2:     +  $EnvironmentInfo['AppBranch']   = $AppBranch
I, [2016-11-29T06:25:54.089066 #4556]  INFO -- default-windows2008r2:     +  $EnvironmentInfo['Environment'] = $Environment
I, [2016-11-29T06:25:54.091998 #4556]  INFO -- default-windows2008r2:     +  return $EnvironmentInfo
I, [2016-11-29T06:25:54.094949 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:54.096905 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.099839 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:54.101792 #4556]  INFO -- default-windows2008r2:     +#  Define function: getCoreBranch()
I, [2016-11-29T06:25:54.104726 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: All
I, [2016-11-29T06:25:54.107641 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:54.110574 #4556]  INFO -- default-windows2008r2:     +#  Determine the branch of its_core to use for enforcement
I, [2016-11-29T06:25:54.113507 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:54.116439 #4556]  INFO -- default-windows2008r2:     +function getCoreBranch([string] $Account, [string] $Application, [string] $AppBranch)
I, [2016-11-29T06:25:54.119392 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:54.122305 #4556]  INFO -- default-windows2008r2:     +  if ($AppBranch -eq "production" -or $AppBranch -eq "master")
I, [2016-11-29T06:25:54.125237 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.128189 #4556]  INFO -- default-windows2008r2:     +    return "production"
I, [2016-11-29T06:25:54.131102 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.134034 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.136969 #4556]  INFO -- default-windows2008r2:     +  elseif ($AppBranch -eq "qa" -or $AppBranch -eq "staging")
I, [2016-11-29T06:25:54.139923 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.143813 #4556]  INFO -- default-windows2008r2:     +    return "qa"
I, [2016-11-29T06:25:54.146746 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.149679 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.151634 #4556]  INFO -- default-windows2008r2:     +  elseif ($AppBranch -eq "development" -or $AppBranch -eq "test")
I, [2016-11-29T06:25:54.154566 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.157500 #4556]  INFO -- default-windows2008r2:     +    return "development"
I, [2016-11-29T06:25:54.161408 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.165321 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.168253 #4556]  INFO -- default-windows2008r2:     +  elseif ($AppBranch -eq "experimental")
I, [2016-11-29T06:25:54.171204 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.174136 #4556]  INFO -- default-windows2008r2:     +    # For ITx-008 account allow experimental branch
I, [2016-11-29T06:25:54.178028 #4556]  INFO -- default-windows2008r2:     +    if ($Application -eq "its_core" -or $Account -like "00[08]")
I, [2016-11-29T06:25:54.181940 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.184872 #4556]  INFO -- default-windows2008r2:     +      return "experimental"
I, [2016-11-29T06:25:54.186827 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.189760 #4556]  INFO -- default-windows2008r2:     +    else
I, [2016-11-29T06:25:54.194648 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.197580 #4556]  INFO -- default-windows2008r2:     +      return "development"
I, [2016-11-29T06:25:54.200515 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.204427 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.208334 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.212244 #4556]  INFO -- default-windows2008r2:     +  # AppBranch not (development, qa, production or experimental)
I, [2016-11-29T06:25:54.216175 #4556]  INFO -- default-windows2008r2:     +  elseif ($Account.StartsWith("0"))
I, [2016-11-29T06:25:54.220085 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.223017 #4556]  INFO -- default-windows2008r2:     +    # Default to development
I, [2016-11-29T06:25:54.225952 #4556]  INFO -- default-windows2008r2:     +    return "development"
I, [2016-11-29T06:25:54.228865 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.230819 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.233753 #4556]  INFO -- default-windows2008r2:     +  # Default to production
I, [2016-11-29T06:25:54.236704 #4556]  INFO -- default-windows2008r2:     +  return "production"
I, [2016-11-29T06:25:54.239617 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:54.243528 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.247462 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:54.250391 #4556]  INFO -- default-windows2008r2:     +#  Define function: publishFact()
I, [2016-11-29T06:25:54.253306 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: All
I, [2016-11-29T06:25:54.256238 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:54.260147 #4556]  INFO -- default-windows2008r2:     +#  Publish fact to both output and Environment
I, [2016-11-29T06:25:54.263100 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:54.266033 #4556]  INFO -- default-windows2008r2:     +function publishFact([string] $Name, $Value)
I, [2016-11-29T06:25:54.267988 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:54.270908 #4556]  INFO -- default-windows2008r2:     +  [Environment]::SetEnvironmentVariable($Name,$Value,"Machine")
I, [2016-11-29T06:25:54.273834 #4556]  INFO -- default-windows2008r2:     +  Write-Output "$Name=$Value"
I, [2016-11-29T06:25:54.276787 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:54.279702 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.282652 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:54.284607 #4556]  INFO -- default-windows2008r2:     +#  Define function: getPlatform()
I, [2016-11-29T06:25:54.287521 #4556]  INFO -- default-windows2008r2:     +#  Hosting Platform: All
I, [2016-11-29T06:25:54.290473 #4556]  INFO -- default-windows2008r2:     +#
I, [2016-11-29T06:25:54.293388 #4556]  INFO -- default-windows2008r2:     +#  Determine cloud platform from IPAddress
I, [2016-11-29T06:25:54.296319 #4556]  INFO -- default-windows2008r2:     +# ********************************************************************************************
I, [2016-11-29T06:25:54.299254 #4556]  INFO -- default-windows2008r2:     +function getPlatform([string] $IPAddress)
I, [2016-11-29T06:25:54.301209 #4556]  INFO -- default-windows2008r2:     +{
I, [2016-11-29T06:25:54.304142 #4556]  INFO -- default-windows2008r2:     +  $octets=$IPAddress.Split('.')
I, [2016-11-29T06:25:54.307073 #4556]  INFO -- default-windows2008r2:     +  $str=$octets[0] + '.' + $octets[1]
I, [2016-11-29T06:25:54.310985 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.313937 #4556]  INFO -- default-windows2008r2:     +  # AWS Subnets
I, [2016-11-29T06:25:54.316869 #4556]  INFO -- default-windows2008r2:     +  if (($str -eq '10.37') -or ($str -eq '10.157') -or ($str -eq '10.221'))
I, [2016-11-29T06:25:54.319782 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.322715 #4556]  INFO -- default-windows2008r2:     +    return 'AWS'
I, [2016-11-29T06:25:54.325648 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.328584 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.331534 #4556]  INFO -- default-windows2008r2:     +  # Azure Subnets
I, [2016-11-29T06:25:54.336403 #4556]  INFO -- default-windows2008r2:     +  if (($str -eq '10.67') -or ($str -eq '10.179') -or ($str -eq '10.215'))
I, [2016-11-29T06:25:54.339337 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.343245 #4556]  INFO -- default-windows2008r2:     +    return 'AZR'
I, [2016-11-29T06:25:54.346178 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.350109 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.353042 #4556]  INFO -- default-windows2008r2:     +  elseif ($octets[0] -eq '10')
I, [2016-11-29T06:25:54.355955 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.358890 #4556]  INFO -- default-windows2008r2:     +    return 'OPC'
I, [2016-11-29T06:25:54.361839 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.365733 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.368663 #4556]  INFO -- default-windows2008r2:     +  write-log "Could not detect the hosting platform from $IPAddress"
I, [2016-11-29T06:25:54.372576 #4556]  INFO -- default-windows2008r2:     +  return "NotSet"
I, [2016-11-29T06:25:54.376505 #4556]  INFO -- default-windows2008r2:     +}
I, [2016-11-29T06:25:54.378439 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.381372 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.385284 #4556]  INFO -- default-windows2008r2:     +#  ********************************************************************************************
I, [2016-11-29T06:25:54.389193 #4556]  INFO -- default-windows2008r2:     +#  SCM_Facts procedure begins here
I, [2016-11-29T06:25:54.392126 #4556]  INFO -- default-windows2008r2:     +#  ********************************************************************************************
I, [2016-11-29T06:25:54.395059 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.398970 #4556]  INFO -- default-windows2008r2:     +  ### Set system variables
I, [2016-11-29T06:25:54.401905 #4556]  INFO -- default-windows2008r2:     +  $Name_of_This_Script = "scm_facts.ps1"
I, [2016-11-29T06:25:54.404835 #4556]  INFO -- default-windows2008r2:     +  $datetime = get-date -format "dd-MMM-yyyy HH:mm:ss"
I, [2016-11-29T06:25:54.407767 #4556]  INFO -- default-windows2008r2:     +  $TimeZone = invoke-command {tzutil /g}
I, [2016-11-29T06:25:54.411678 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.414612 #4556]  INFO -- default-windows2008r2:     +  write-log "Started script: $Name_of_This_Script at $datetime $TimeZone"
I, [2016-11-29T06:25:54.417545 #4556]  INFO -- default-windows2008r2:     +  RunningAsAdministrator
I, [2016-11-29T06:25:54.420479 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.423410 #4556]  INFO -- default-windows2008r2:     +  # Operating System
I, [2016-11-29T06:25:54.427321 #4556]  INFO -- default-windows2008r2:     +  $OperatingSystem = (Get-WmiObject Win32_OperatingSystem).Caption
I, [2016-11-29T06:25:54.443941 #4556]  INFO -- default-windows2008r2:     +  write-log "Operating System - $OperatingSystem"
I, [2016-11-29T06:25:54.446875 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.449808 #4556]  INFO -- default-windows2008r2:     +  # IP Address
I, [2016-11-29T06:25:54.452738 #4556]  INFO -- default-windows2008r2:     +  if ($OperatingSystem -like "*Windows Server 2012*")
I, [2016-11-29T06:25:54.457627 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.461540 #4556]  INFO -- default-windows2008r2:     +    $IPAddress = (get-netadapter | get-netipaddress | Sort-Object InterfaceIndex | ? addressfamily -eq 'IPv4').IPAddress | Select-Object -First 1
I, [2016-11-29T06:25:54.464469 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.467404 #4556]  INFO -- default-windows2008r2:     +  elseif ($OperatingSystem -like "*Windows Server 2008*")
I, [2016-11-29T06:25:54.469360 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.472292 #4556]  INFO -- default-windows2008r2:     +    $IPAddress = (Get-WmiObject -class win32_NetworkAdapterConfiguration -Filter 'ipenabled = "true"' | Sort-Object InterfaceIndex | Select-Object -First 1).IPAddress[0]
I, [2016-11-29T06:25:54.475225 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.478157 #4556]  INFO -- default-windows2008r2:     +  write-log "IP Address - $IPAddress"
I, [2016-11-29T06:25:54.481090 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.484025 #4556]  INFO -- default-windows2008r2:     +  # Platform
I, [2016-11-29T06:25:54.486955 #4556]  INFO -- default-windows2008r2:     +  $HostingPlatform = getPlatform $IPAddress
I, [2016-11-29T06:25:54.489890 #4556]  INFO -- default-windows2008r2:     +  write-log "Hosting Platform - $HostingPlatform"
I, [2016-11-29T06:25:54.492820 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.496753 #4556]  INFO -- default-windows2008r2:     +  # Is VPC?
I, [2016-11-29T06:25:54.499684 #4556]  INFO -- default-windows2008r2:     +  $IsVPCx = ($HostingPlatform -ne "OPC")
I, [2016-11-29T06:25:54.501638 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.504572 #4556]  INFO -- default-windows2008r2:     +  # Determine Global environment prefix
I, [2016-11-29T06:25:54.507485 #4556]  INFO -- default-windows2008r2:     +  $ServerEnvironment  = [Environment]::GetEnvironmentVariable('vpcx_vpcxenvironment', "Machine")
I, [2016-11-29T06:25:54.510420 #4556]  INFO -- default-windows2008r2:     +  if (StringIsNullOrBlank($ServerEnvironment))
I, [2016-11-29T06:25:54.514329 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.519217 #4556]  INFO -- default-windows2008r2:     +    if ($IsVPCx -eq $true)
I, [2016-11-29T06:25:54.522150 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.526060 #4556]  INFO -- default-windows2008r2:     +      switch -regex ($env:computername.Substring(3,3).ToLower()) {
I, [2016-11-29T06:25:54.528992 #4556]  INFO -- default-windows2008r2:     +        "[0-9]+"  { $ServerEnvironment = 'Development'; break }
I, [2016-11-29T06:25:54.531928 #4556]  INFO -- default-windows2008r2:     +        "aba"     { $ServerEnvironment = 'QA'         ; break }
I, [2016-11-29T06:25:54.535836 #4556]  INFO -- default-windows2008r2:     +        "abe"     { $ServerEnvironment = 'QA'         ; break }
I, [2016-11-29T06:25:54.539748 #4556]  INFO -- default-windows2008r2:     +        "aca"     { $ServerEnvironment = 'QA'         ; break }
I, [2016-11-29T06:25:54.542679 #4556]  INFO -- default-windows2008r2:     +        "acb"     { $ServerEnvironment = 'QA'         ; break }
I, [2016-11-29T06:25:54.545611 #4556]  INFO -- default-windows2008r2:     +         default  { $ServerEnvironment = 'Production' }
I, [2016-11-29T06:25:54.548544 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:54.551478 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.555388 #4556]  INFO -- default-windows2008r2:     +    else
I, [2016-11-29T06:25:54.559321 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.562232 #4556]  INFO -- default-windows2008r2:     +      # TODO - but for now OPCx == Development
I, [2016-11-29T06:25:54.566162 #4556]  INFO -- default-windows2008r2:     +      $ServerEnvironment = 'Development'
I, [2016-11-29T06:25:54.569075 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.572008 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.574941 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.577876 #4556]  INFO -- default-windows2008r2:     +  # VPCx Facts Cache
I, [2016-11-29T06:25:54.581784 #4556]  INFO -- default-windows2008r2:     +  $FactsFolder     = "$JnJFolder\vpcx_facts"
I, [2016-11-29T06:25:54.585697 #4556]  INFO -- default-windows2008r2:     +  if (!(Test-Path $FactsFolder)) {New-Item -ItemType Directory -Path $FactsFolder}
I, [2016-11-29T06:25:54.589628 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.593516 #4556]  INFO -- default-windows2008r2:     +  # VPCxPrefix (dvl-, qa-, <empty for prod>)
I, [2016-11-29T06:25:54.596468 #4556]  INFO -- default-windows2008r2:     +  if ($ServerEnvironment -eq "Development")
I, [2016-11-29T06:25:54.600362 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.603294 #4556]  INFO -- default-windows2008r2:     +    $vpcxprefix="dvl-"
I, [2016-11-29T06:25:54.606227 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.609160 #4556]  INFO -- default-windows2008r2:     +  elseif ($ServerEnvironment -eq "QA")
I, [2016-11-29T06:25:54.613068 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.616001 #4556]  INFO -- default-windows2008r2:     +    $vpcxprefix="qa-"
I, [2016-11-29T06:25:54.619911 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.623843 #4556]  INFO -- default-windows2008r2:     +  else
I, [2016-11-29T06:25:54.626776 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.631643 #4556]  INFO -- default-windows2008r2:     +    $vpcxprefix=""
I, [2016-11-29T06:25:54.635555 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.640461 #4556]  INFO -- default-windows2008r2:     +  write-log "Server Environment is $ServerEnvironment"
I, [2016-11-29T06:25:54.643394 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.647305 #4556]  INFO -- default-windows2008r2:     +  # VPCxPrefix
I, [2016-11-29T06:25:54.650217 #4556]  INFO -- default-windows2008r2:     +  $vpcxprefix_file = $FactsFolder + "\vpcxprefix.txt"
I, [2016-11-29T06:25:54.653170 #4556]  INFO -- default-windows2008r2:     +  "vpcxprefix",$vpcxprefix -join '=' | Out-File -FilePath $vpcxprefix_file -Encoding ascii
I, [2016-11-29T06:25:54.656083 #4556]  INFO -- default-windows2008r2:     +  publishFact "vpcxprefix" $vpcxprefix
I, [2016-11-29T06:25:54.659996 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.663904 #4556]  INFO -- default-windows2008r2:     +  # SCM Build Type
I, [2016-11-29T06:25:54.666838 #4556]  INFO -- default-windows2008r2:     +  $scm_buildtype = (Get-ItemProperty -ErrorAction SilentlyContinue -Path "Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\JNJ\Server" -Name "scm_buildtype")."scm_buildtype"
I, [2016-11-29T06:25:54.669769 #4556]  INFO -- default-windows2008r2:     +  if(StringIsNullOrBlank($scm_buildtype)) { $scm_buildtype = $nullvar }
I, [2016-11-29T06:25:54.673680 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_buildtype" $scm_buildtype
I, [2016-11-29T06:25:54.677592 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.681501 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:54.684434 #4556]  INFO -- default-windows2008r2:     +  # Init Environment
I, [2016-11-29T06:25:54.687367 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:54.691296 #4556]  INFO -- default-windows2008r2:     +  if ($HostingPlatform -eq 'AWS')
I, [2016-11-29T06:25:54.694209 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.697162 #4556]  INFO -- default-windows2008r2:     +    $env:Path = $env:Path + ";C:\Program Files\Amazon\AWSCLI\;C:\Users\AdminNCS\.aws;C:\Users\Administrator\.aws"
I, [2016-11-29T06:25:54.701057 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.703991 #4556]  INFO -- default-windows2008r2:     +    # xbot endpoint hostname
I, [2016-11-29T06:25:54.706921 #4556]  INFO -- default-windows2008r2:     +    $xBot_API_Endpoint = $vpcxprefix + "api.vpcx.jnj.com"
I, [2016-11-29T06:25:54.711807 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.715717 #4556]  INFO -- default-windows2008r2:     +    # xbot endpoint urls
I, [2016-11-29T06:25:54.718651 #4556]  INFO -- default-windows2008r2:     +    $xBot_API_Hostname = "http://" + $xBot_API_Endpoint + "/instance/name?ip_address=" + $IPAddress
I, [2016-11-29T06:25:54.721583 #4556]  INFO -- default-windows2008r2:     +    $xBot_API_Info     = "http://" + $xBot_API_Endpoint + "/instance/info?ip_address=" + $IPAddress
I, [2016-11-29T06:25:54.724516 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.728446 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.732339 #4556]  INFO -- default-windows2008r2:     +  if ($HostingPlatform -eq 'AZR')
I, [2016-11-29T06:25:54.735272 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.739182 #4556]  INFO -- default-windows2008r2:     +    $env:Path = $env:Path + ";C:\Users\AdminNCS\.azr;C:\Users\Administrator\.azr"
I, [2016-11-29T06:25:54.743091 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.747001 #4556]  INFO -- default-windows2008r2:     +    # xbot endpoint hostname
I, [2016-11-29T06:25:54.749934 #4556]  INFO -- default-windows2008r2:     +    $xBot_API_Endpoint = @{$true="10.67.0.4";$false="10.67.8.4"}[$ServerEnvironment -eq "Development"]
I, [2016-11-29T06:25:54.753845 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.758733 #4556]  INFO -- default-windows2008r2:     +    # xbot endpoint urls
I, [2016-11-29T06:25:54.762644 #4556]  INFO -- default-windows2008r2:     +    $xBot_API_Hostname = "http://" + $xBot_API_Endpoint + "/instance/name?ip_address=" + $IPAddress
I, [2016-11-29T06:25:54.765579 #4556]  INFO -- default-windows2008r2:     +    $xBot_API_Info     = "http://" + $xBot_API_Endpoint + "/instance/info?ip_address=" + $IPAddress
I, [2016-11-29T06:25:54.769487 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.772419 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.777308 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:54.781218 #4556]  INFO -- default-windows2008r2:     +  # Pull VPCx Facts
I, [2016-11-29T06:25:54.785129 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:54.790016 #4556]  INFO -- default-windows2008r2:     +  if ($IsVPCx -eq $true)
I, [2016-11-29T06:25:54.794905 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.798816 #4556]  INFO -- default-windows2008r2:     +    ### Retrieve Instance API info and set as vpcx_ facts
I, [2016-11-29T06:25:54.808592 #4556]  INFO -- default-windows2008r2:     +    $keyPrefix    = "vpcx_"
I, [2016-11-29T06:25:54.813479 #4556]  INFO -- default-windows2008r2:     +    $InfoValues   = ""
I, [2016-11-29T06:25:54.816415 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.821300 #4556]  INFO -- default-windows2008r2:     +    $vpcxValues   = CallAPI $xBot_API_Info $true
I, [2016-11-29T06:25:54.825211 #4556]  INFO -- default-windows2008r2:     +    if ($vpcxValues -ne $ErrorNotFound)
I, [2016-11-29T06:25:54.829121 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.834010 #4556]  INFO -- default-windows2008r2:     +      $InfoValues   = $vpcxValues.ToLower().Replace(" ", "`n").Replace("ssh-rsa`n", "ssh-rsa ").Split("`n")
I, [2016-11-29T06:25:54.838898 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.842811 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.847699 #4556]  INFO -- default-windows2008r2:     +  else
I, [2016-11-29T06:25:54.851608 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.855519 #4556]  INFO -- default-windows2008r2:     +    ### Retrieve Instance info and set as opcx_ facts
I, [2016-11-29T06:25:54.859428 #4556]  INFO -- default-windows2008r2:     +    $keyPrefix    = "opcx_"
I, [2016-11-29T06:25:54.863338 #4556]  INFO -- default-windows2008r2:     +    $InfoValues   = ""
I, [2016-11-29T06:25:54.868226 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.872136 #4556]  INFO -- default-windows2008r2:     +    if (Test-Path "$JnJFolder\instance_facts.txt")
I, [2016-11-29T06:25:54.876049 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.878980 #4556]  INFO -- default-windows2008r2:     +      $opcxValues = Get-Content "$JnJFolder\instance_facts.txt"
I, [2016-11-29T06:25:54.881912 #4556]  INFO -- default-windows2008r2:     +      $InfoValues = $opcxValues.ToLower().Replace("ssh-rsa`n", "ssh-rsa ").Split("`n")
I, [2016-11-29T06:25:54.883868 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.886800 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:54.889733 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:54.892667 #4556]  INFO -- default-windows2008r2:     +  # If no information was retrieved
I, [2016-11-29T06:25:54.895599 #4556]  INFO -- default-windows2008r2:     +  if ($InfoValues -eq "")
I, [2016-11-29T06:25:54.898532 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:54.901465 #4556]  INFO -- default-windows2008r2:     +    # Basic Facts required, defaults will be added later
I, [2016-11-29T06:25:54.904398 #4556]  INFO -- default-windows2008r2:     +    $basicValues  = "environment:$($ServerEnvironment)`nregion:`nhostname:$($env:COMPUTERNAME)`ngxp:false`nsox:false`ndmz:false"
I, [2016-11-29T06:25:54.907331 #4556]  INFO -- default-windows2008r2:     +    if ($IsVPCx -eq $true)
I, [2016-11-29T06:25:54.910265 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:54.913196 #4556]  INFO -- default-windows2008r2:     +      $basicValues  = "vpcxenvironment:$($ServerEnvironment)`n$($basicValues)"
I, [2016-11-29T06:25:54.974786 #4556]  INFO -- default-windows2008r2:     +      $basicValues  = "alertlogickey:`nalertlogiccid:`n$($basicValues)"
I, [2016-11-29T06:25:54.977728 #4556]  INFO -- default-windows2008r2:     +      if ($HostingPlatform -eq 'AZR')
I, [2016-11-29T06:25:54.981630 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:54.984563 #4556]  INFO -- default-windows2008r2:     +        $basicValues= "resourcegroup:none`n$($basicValues)"
I, [2016-11-29T06:25:54.987495 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:54.991406 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:54.995317 #4556]  INFO -- default-windows2008r2:     +    $InfoValues   = $basicValues.ToLower().Split("`n")
I, [2016-11-29T06:25:54.998249 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:55.001182 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.004116 #4556]  INFO -- default-windows2008r2:     +  # For all info: parse, cache and publish
I, [2016-11-29T06:25:55.007049 #4556]  INFO -- default-windows2008r2:     +  foreach ($Line in $InfoValues)
I, [2016-11-29T06:25:55.010959 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:55.012914 #4556]  INFO -- default-windows2008r2:     +    if (StringIsNullOrBlank($Line)) { continue }
I, [2016-11-29T06:25:55.016825 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.021713 #4556]  INFO -- default-windows2008r2:     +    # Split value
I, [2016-11-29T06:25:55.026600 #4556]  INFO -- default-windows2008r2:     +    $Values = $Line.Split(":")
I, [2016-11-29T06:25:55.029535 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.032467 #4556]  INFO -- default-windows2008r2:     +    if ($Values.Count -gt 1)
I, [2016-11-29T06:25:55.035399 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:55.040290 #4556]  INFO -- default-windows2008r2:     +      # Remove prefix from name
I, [2016-11-29T06:25:55.044202 #4556]  INFO -- default-windows2008r2:     +      $FactName   = $Values[0].Replace($keyPrefix, "")
I, [2016-11-29T06:25:55.047133 #4556]  INFO -- default-windows2008r2:     +      $FactValue  = $Values[1]
I, [2016-11-29T06:25:55.051047 #4556]  INFO -- default-windows2008r2:     +      switch ($FactName)
I, [2016-11-29T06:25:55.055929 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:55.058863 #4556]  INFO -- default-windows2008r2:     +        "linuxadminpublickey"                 { if($FactValue -notlike "ssh-rsa AAAA*"){continue} }
I, [2016-11-29T06:25:55.061797 #4556]  INFO -- default-windows2008r2:     +        "alertlogickey"                       {
I, [2016-11-29T06:25:55.065708 #4556]  INFO -- default-windows2008r2:     +          if(StringIsNullOrBlank($FactValue) -and $HostingPlatform -eq 'AZR') { $FactValue = "bedf42b54ba750b97bda6062790e9029e9b344e56b32498266" }
I, [2016-11-29T06:25:55.067660 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:55.071590 #4556]  INFO -- default-windows2008r2:     +        "alertlogiccid"                       {
I, [2016-11-29T06:25:55.075501 #4556]  INFO -- default-windows2008r2:     +          if(StringIsNullOrBlank($FactValue) -and $HostingPlatform -eq 'AZR') { $FactValue = "33376" }
I, [2016-11-29T06:25:55.078434 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:55.081349 #4556]  INFO -- default-windows2008r2:     +        "awsaccountid"                        {
I, [2016-11-29T06:25:55.086238 #4556]  INFO -- default-windows2008r2:     +          if(StringIsNullOrBlank($FactValue)) { $FactValue = $nullvar }
I, [2016-11-29T06:25:55.090147 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:55.094058 #4556]  INFO -- default-windows2008r2:     +        "region"                              {
I, [2016-11-29T06:25:55.096992 #4556]  INFO -- default-windows2008r2:     +          if(StringIsNullOrBlank($FactValue)) { $FactValue = "us-east-1" }
I, [2016-11-29T06:25:55.099941 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.102854 #4556]  INFO -- default-windows2008r2:     +          #Azure
I, [2016-11-29T06:25:55.106766 #4556]  INFO -- default-windows2008r2:     +          #NA - eastus, eastus2
I, [2016-11-29T06:25:55.109698 #4556]  INFO -- default-windows2008r2:     +          #EU - westeurope, northeurope
I, [2016-11-29T06:25:55.112630 #4556]  INFO -- default-windows2008r2:     +          #AP - southeastasia, eastasia
I, [2016-11-29T06:25:55.240721 #4556]  INFO -- default-windows2008r2:     +          $region     = $FactValue.ToLower();
I, [2016-11-29T06:25:55.248520 #4556]  INFO -- default-windows2008r2:     +          if($region -like '*eastus*')  {  $region = "us-east-1"      }
I, [2016-11-29T06:25:55.254390 #4556]  INFO -- default-windows2008r2:     +          if($region -like '*europe*')  {  $region = "eu-west-1"      }
I, [2016-11-29T06:25:55.262212 #4556]  INFO -- default-windows2008r2:     +          if($region -like '*eastasia*'){  $region = "ap-southeast-1" }
I, [2016-11-29T06:25:55.270029 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.277854 #4556]  INFO -- default-windows2008r2:     +          #OPC
I, [2016-11-29T06:25:55.284692 #4556]  INFO -- default-windows2008r2:     +          if($region -like 'na')        {  $region = "us-east-1"      }
I, [2016-11-29T06:25:55.288603 #4556]  INFO -- default-windows2008r2:     +          if($region -like 'eu')        {  $region = "eu-west-1"      }
I, [2016-11-29T06:25:55.294471 #4556]  INFO -- default-windows2008r2:     +          if($region -like 'ap')        {  $region = "ap-southeast-1" }
I, [2016-11-29T06:25:55.300337 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.304247 #4556]  INFO -- default-windows2008r2:     +          $FactValue  = $region
I, [2016-11-29T06:25:55.309150 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:55.313048 #4556]  INFO -- default-windows2008r2:     +        "accountid"                           { if($FactValue -notmatch "itx-.*|azr-.*|opc-.*")  { continue } }
I, [2016-11-29T06:25:55.317948 #4556]  INFO -- default-windows2008r2:     +        "hostname"                            { if($FactValue -notmatch "aws.*|azr.*|its.*")     { continue } }
I, [2016-11-29T06:25:55.323797 #4556]  INFO -- default-windows2008r2:     +        "vpcxenvironment"                     { if(StringIsNullOrBlank($FactValue))              { $FactValue = $ServerEnvironment.ToLower() } }
I, [2016-11-29T06:25:55.329680 #4556]  INFO -- default-windows2008r2:     +        "environment"                         { if(StringIsNullOrBlank($FactValue))              { $FactValue = $ServerEnvironment.ToLower() } }
I, [2016-11-29T06:25:55.334551 #4556]  INFO -- default-windows2008r2:     +        "gxp"                                 { if($FactValue -notmatch "true|false")            { $FactValue = "false" } }
I, [2016-11-29T06:25:55.339438 #4556]  INFO -- default-windows2008r2:     +        "sox"                                 { if($FactValue -notmatch "true|false")            { $FactValue = "false" } }
I, [2016-11-29T06:25:55.346282 #4556]  INFO -- default-windows2008r2:     +        "dmz"                                 { if($FactValue -notmatch "true|false")            { $FactValue = "false" } }
I, [2016-11-29T06:25:55.351169 #4556]  INFO -- default-windows2008r2:     +        "legalhold"                           { if($FactValue -notmatch "true|false")            { $FactValue = $nullvar} }
I, [2016-11-29T06:25:55.355080 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.359968 #4556]  INFO -- default-windows2008r2:     +        # default nullvar
I, [2016-11-29T06:25:55.779374 #4556]  INFO -- default-windows2008r2:     +        default                               { if(StringIsNullOrBlank($FactValue))              { $FactValue = $nullvar}}
I, [2016-11-29T06:25:55.815539 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:55.825315 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.832159 #4556]  INFO -- default-windows2008r2:     +      # Write fact to a file
I, [2016-11-29T06:25:55.853666 #4556]  INFO -- default-windows2008r2:     +      "$($FactName)=$($FactValue)" | Out-File "$FactsFolder\$($keyPrefix)$($FactName)" -Encoding ascii
I, [2016-11-29T06:25:55.857575 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:55.862466 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:55.866374 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.871263 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:55.878105 #4556]  INFO -- default-windows2008r2:     +  # Publish VPCx Facts
I, [2016-11-29T06:25:55.882995 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:55.886904 #4556]  INFO -- default-windows2008r2:     +  # Hostname
I, [2016-11-29T06:25:55.891792 #4556]  INFO -- default-windows2008r2:     +  # eg. aws000nva1011 or azr000nva1011
I, [2016-11-29T06:25:55.895703 #4556]  INFO -- default-windows2008r2:     +  #$Hostname = CallAPI $xBot_API_Hostname $true
I, [2016-11-29T06:25:55.899614 #4556]  INFO -- default-windows2008r2:     +  $Hostname = $env:COMPUTERNAME
I, [2016-11-29T06:25:55.903524 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.907434 #4556]  INFO -- default-windows2008r2:     +  # For every fact locally cached, publish it
I, [2016-11-29T06:25:55.912322 #4556]  INFO -- default-windows2008r2:     +  $vpcxFacts = @{}
I, [2016-11-29T06:25:55.916232 #4556]  INFO -- default-windows2008r2:     +  foreach ($file in (Get-ChildItem -Path $FactsFolder -Filter "$($keyPrefix)*.*"))
I, [2016-11-29T06:25:55.920143 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:55.925032 #4556]  INFO -- default-windows2008r2:     +    $Line = Get-Content $file.FullName
I, [2016-11-29T06:25:55.931875 #4556]  INFO -- default-windows2008r2:     +    $Values = $Line.Split("=")
I, [2016-11-29T06:25:55.935786 #4556]  INFO -- default-windows2008r2:     +    if ($Values.count -eq 2)
I, [2016-11-29T06:25:55.940674 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:55.944584 #4556]  INFO -- default-windows2008r2:     +      $Values[0] = $Values[0].Replace('vpcx_', '')
I, [2016-11-29T06:25:55.949472 #4556]  INFO -- default-windows2008r2:     +      publishFact "$($keyPrefix)$($Values[0])" $Values[1]
I, [2016-11-29T06:25:55.953382 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:55.958271 #4556]  INFO -- default-windows2008r2:     +      # Create 'vpcx_' fact for non VPC environments for backward compatibility
I, [2016-11-29T06:25:55.964136 #4556]  INFO -- default-windows2008r2:     +      if ($IsVPCx -ne $true)
I, [2016-11-29T06:25:55.969024 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:55.972935 #4556]  INFO -- default-windows2008r2:     +        publishFact "vpcx_$($Values[0])" $Values[1]
I, [2016-11-29T06:25:55.977823 #4556]  INFO -- default-windows2008r2:     +        if ($Values[0] -eq "environment")
I, [2016-11-29T06:25:55.981736 #4556]  INFO -- default-windows2008r2:     +        {
I, [2016-11-29T06:25:55.986622 #4556]  INFO -- default-windows2008r2:     +          publishFact "vpcx_vpcx$($Values[0])" $Values[1]
I, [2016-11-29T06:25:55.991509 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:55.995420 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:56.000308 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.004219 #4556]  INFO -- default-windows2008r2:     +      $vpcxFacts[$Values[0]] = $Values[1]
I, [2016-11-29T06:25:56.009106 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:56.013996 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.017905 #4556]  INFO -- default-windows2008r2:     +    # Hostname
I, [2016-11-29T06:25:56.021816 #4556]  INFO -- default-windows2008r2:     +    if ($Values[0] -eq "hostname")
I, [2016-11-29T06:25:56.025728 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:56.028662 #4556]  INFO -- default-windows2008r2:     +      $Hostname = $Values[1]
I, [2016-11-29T06:25:56.032589 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:56.035505 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:56.040392 #4556]  INFO -- default-windows2008r2:     +  write-log "Hostname - $Hostname"
I, [2016-11-29T06:25:56.044325 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.048231 #4556]  INFO -- default-windows2008r2:     +  # SCM Hostname and IPAddress
I, [2016-11-29T06:25:56.051146 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_ipaddress" $IPAddress
I, [2016-11-29T06:25:56.054079 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_hostname" $Hostname
I, [2016-11-29T06:25:56.057012 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.061898 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:56.064831 #4556]  INFO -- default-windows2008r2:     +  # Gather Environment Details
I, [2016-11-29T06:25:56.068744 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:56.070698 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.074607 #4556]  INFO -- default-windows2008r2:     +  # Account
I, [2016-11-29T06:25:56.077543 #4556]  INFO -- default-windows2008r2:     +  $Account = $Hostname.SubString(3,3).ToLower();
I, [2016-11-29T06:25:56.080476 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.085360 #4556]  INFO -- default-windows2008r2:     +  # IAM / Resource Group
I, [2016-11-29T06:25:56.089273 #4556]  INFO -- default-windows2008r2:     +  if ($HostingPlatform -eq 'AZR')
I, [2016-11-29T06:25:56.093184 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:56.096117 #4556]  INFO -- default-windows2008r2:     +    # Region from xBot
I, [2016-11-29T06:25:56.100025 #4556]  INFO -- default-windows2008r2:     +    $Region           = $vpcxFacts.Get_Item("region").ToLower();
I, [2016-11-29T06:25:56.103956 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.106871 #4556]  INFO -- default-windows2008r2:     +    # Instance-id
I, [2016-11-29T06:25:56.110779 #4556]  INFO -- default-windows2008r2:     +    $InstanceID       = (Get-WmiObject -class Win32_ComputerSystemProduct -namespace root\CIMV2).UUID.ToString()
I, [2016-11-29T06:25:56.114689 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.119578 #4556]  INFO -- default-windows2008r2:     +    # Resource Group
I, [2016-11-29T06:25:56.123508 #4556]  INFO -- default-windows2008r2:     +    $ResourceGroup    = $vpcxFacts.Get_Item("resourcegroup").ToLower();
I, [2016-11-29T06:25:56.126423 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.130334 #4556]  INFO -- default-windows2008r2:     +    ### Determine server application environment
I, [2016-11-29T06:25:56.133264 #4556]  INFO -- default-windows2008r2:     +    $EnvironmentInfo  = getEnvironmentFromRole -Account $Account -Role $ResourceGroup -RolePartsLen 4 -IndexBranch 3
I, [2016-11-29T06:25:56.137175 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:56.141085 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.144996 #4556]  INFO -- default-windows2008r2:     +  if ($HostingPlatform -eq 'AWS')
I, [2016-11-29T06:25:56.147931 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:56.150864 #4556]  INFO -- default-windows2008r2:     +    $MetaDataURL      = "http://169.254.169.254/latest/meta-data"
I, [2016-11-29T06:25:56.153794 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.156729 #4556]  INFO -- default-windows2008r2:     +    # Region from AWS
I, [2016-11-29T06:25:56.160638 #4556]  INFO -- default-windows2008r2:     +    $RegionAZ         = CallAPI ($MetaDataURL + "/placement/availability-zone/") $true
I, [2016-11-29T06:25:56.166503 #4556]  INFO -- default-windows2008r2:     +    $Region           = $RegionAZ.SubString(0, $RegionAZ.Length-1)
I, [2016-11-29T06:25:56.170413 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.175302 #4556]  INFO -- default-windows2008r2:     +    # Instance-id
I, [2016-11-29T06:25:56.179212 #4556]  INFO -- default-windows2008r2:     +    $InstanceID       = CallAPI ($MetaDataURL + "/instance-id") $true
I, [2016-11-29T06:25:56.183126 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.186056 #4556]  INFO -- default-windows2008r2:     +    # IAM Role
I, [2016-11-29T06:25:56.188989 #4556]  INFO -- default-windows2008r2:     +    $InstanceRole     = CallAPI ($MetaDataURL + "/iam/security-credentials/") $true
I, [2016-11-29T06:25:56.192900 #4556]  INFO -- default-windows2008r2:     +    if ($InstanceRole -eq $ErrorNotFound)
I, [2016-11-29T06:25:56.196809 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:56.199742 #4556]  INFO -- default-windows2008r2:     +      $InstanceRole   = "none"
I, [2016-11-29T06:25:56.202678 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:56.206589 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.210495 #4556]  INFO -- default-windows2008r2:     +    ### Determine server application environment
I, [2016-11-29T06:25:56.214407 #4556]  INFO -- default-windows2008r2:     +    $EnvironmentInfo  = getEnvironmentFromRole -Account $Account -Role $InstanceRole -RolePartsLen 6 -IndexBranch 4
I, [2016-11-29T06:25:56.219295 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:56.223205 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.226138 #4556]  INFO -- default-windows2008r2:     +  # TODO - Implement when OCPx Method is available - for now hard code
I, [2016-11-29T06:25:56.229072 #4556]  INFO -- default-windows2008r2:     +  if ($HostingPlatform -eq 'OPC')
I, [2016-11-29T06:25:56.232005 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:56.234937 #4556]  INFO -- default-windows2008r2:     +    # use '000000' for account
I, [2016-11-29T06:25:56.237870 #4556]  INFO -- default-windows2008r2:     +    $Account          = $vpcxFacts.Get_Item("accountid").ToLower().Replace("opc-", "");
I, [2016-11-29T06:25:56.240804 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.244713 #4556]  INFO -- default-windows2008r2:     +    # Region
I, [2016-11-29T06:25:56.248626 #4556]  INFO -- default-windows2008r2:     +    $Region           = $vpcxFacts.Get_Item("region").ToLower();
I, [2016-11-29T06:25:56.251558 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.255466 #4556]  INFO -- default-windows2008r2:     +    # Instance-id
I, [2016-11-29T06:25:56.261333 #4556]  INFO -- default-windows2008r2:     +    $InstanceID       = (Get-WmiObject -class Win32_ComputerSystemProduct -namespace root\CIMV2).UUID.ToString()
I, [2016-11-29T06:25:56.265262 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.268178 #4556]  INFO -- default-windows2008r2:     +    # OPC 'role' looks like 'OPC-account-app-branch'   (-app-  or -scm- parts not present)
I, [2016-11-29T06:25:56.271110 #4556]  INFO -- default-windows2008r2:     +    $InstanceRole     = "opc-" + $Account + "-" + $vpcxFacts.Get_Item("application").ToLower() + "-" + $vpcxFacts.Get_Item("appbranch").ToLower()
I, [2016-11-29T06:25:56.274042 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.277973 #4556]  INFO -- default-windows2008r2:     +    ### Determine server application environment
I, [2016-11-29T06:25:56.279926 #4556]  INFO -- default-windows2008r2:     +    $EnvironmentInfo  = getEnvironmentFromRole -Account $Account -Role $InstanceRole -RolePartsLen 4 -IndexBranch 3
I, [2016-11-29T06:25:56.282860 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:56.285772 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.288705 #4556]  INFO -- default-windows2008r2:     +  # Publish SCM Facts
I, [2016-11-29T06:25:56.292617 #4556]  INFO -- default-windows2008r2:     +  $AppOrSCM    = $EnvironmentInfo['AppOrSCM']
I, [2016-11-29T06:25:56.295568 #4556]  INFO -- default-windows2008r2:     +  $Application = $EnvironmentInfo['Application']
I, [2016-11-29T06:25:56.555603 #4556]  INFO -- default-windows2008r2:     +  $AppBranch   = $EnvironmentInfo['AppBranch']
I, [2016-11-29T06:25:56.564422 #4556]  INFO -- default-windows2008r2:     +  $Environment = $EnvironmentInfo['Environment']
I, [2016-11-29T06:25:56.572243 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.595680 #4556]  INFO -- default-windows2008r2:     +  ### Determine mapping of Application branch (environment) to ITS_Core Branch (environment)
I, [2016-11-29T06:25:56.607409 #4556]  INFO -- default-windows2008r2:     +  $CoreBranch  = getCoreBranch -Account $Account -Application $Application -AppBranch $AppBranch
I, [2016-11-29T06:25:56.613275 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.620118 #4556]  INFO -- default-windows2008r2:     +  ## S3 App bucket s3:// url
I, [2016-11-29T06:25:56.630872 #4556]  INFO -- default-windows2008r2:     +  if ($false -eq ($Application -eq "UnManagedApplication" -or $Application -eq "WrongApplication")) {
I, [2016-11-29T06:25:56.634782 #4556]  INFO -- default-windows2008r2:     +    $S3AppStorage = "s3://itx-" + $Account + "-" + $AppOrSCM + "-" + $Application + "/" + $AppBranch
I, [2016-11-29T06:25:56.638710 #4556]  INFO -- default-windows2008r2:     +  } else {
I, [2016-11-29T06:25:56.641643 #4556]  INFO -- default-windows2008r2:     +    $S3AppStorage = $nullvar
I, [2016-11-29T06:25:56.645553 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:56.648471 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.652380 #4556]  INFO -- default-windows2008r2:     +  # vpcx bucket https:// url
I, [2016-11-29T06:25:56.655315 #4556]  INFO -- default-windows2008r2:     +  $S3VpcxPackages = "https://s3.amazonaws.com/jnj-" + $vpcxprefix + "vpcx-scm/packages"
I, [2016-11-29T06:25:56.659239 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.663136 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:56.666068 #4556]  INFO -- default-windows2008r2:     +  # Publish SCM Facts
I, [2016-11-29T06:25:56.669976 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:56.673903 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_account" $Account
I, [2016-11-29T06:25:56.677814 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_appbranch" $AppBranch
I, [2016-11-29T06:25:56.680747 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_application" $Application
I, [2016-11-29T06:25:56.684640 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_appstorage" (@{$true=$S3AppStorage;$false=$nullvar}[$HostingPlatform -eq 'AWS'])
I, [2016-11-29T06:25:56.689529 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_aws_iam_role" (@{$true=$InstanceRole;$false=$nullvar}[$HostingPlatform -eq 'AWS' -and $InstanceRole -ne $null -and $InstanceRole -ne 'none'])
I, [2016-11-29T06:25:56.695500 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_azure_resourcegroup" (@{$true=$ResourceGroup;$false=$nullvar}[$ResourceGroup -ne $null])
I, [2016-11-29T06:25:56.699309 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_opc_role" (@{$true=$InstanceRole;$false=$nullvar}[$HostingPlatform -eq 'OPC' -and $InstanceRole -ne $null -and $InstanceRole -ne 'none'])
I, [2016-11-29T06:25:56.703219 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_corebranch" $CoreBranch
I, [2016-11-29T06:25:56.707130 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_environment" $Environment
I, [2016-11-29T06:25:56.711037 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_hosting_platform" $HostingPlatform
I, [2016-11-29T06:25:56.782404 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_iam_role" (@{$true=$InstanceRole;$false=$nullvar}[$HostingPlatform -eq 'AWS' -and $InstanceRole -ne $null -and $InstanceRole -ne 'none'])
I, [2016-11-29T06:25:56.787292 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_instance_id" $InstanceID
I, [2016-11-29T06:25:56.792179 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_packages" $S3VpcxPackages
I, [2016-11-29T06:25:56.795113 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_region" $Region
I, [2016-11-29T06:25:56.798060 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.800996 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:56.803929 #4556]  INFO -- default-windows2008r2:     +  # SCM-837 - EnableUAC
I, [2016-11-29T06:25:56.806844 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:56.811731 #4556]  INFO -- default-windows2008r2:     +  $uac_enable = "true"
I, [2016-11-29T06:25:56.814664 #4556]  INFO -- default-windows2008r2:     +  if (Test-Path "C:\JnJServerBuild-Windows")
I, [2016-11-29T06:25:56.818574 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:56.821509 #4556]  INFO -- default-windows2008r2:     +    $build_in_progress = "true"
I, [2016-11-29T06:25:56.824442 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.876256 #4556]  INFO -- default-windows2008r2:     +    # Build is in progress, check how far along it is, must be on or after phase5
I, [2016-11-29T06:25:56.883103 #4556]  INFO -- default-windows2008r2:     +    $PhasesControlFile = "C:\JnJServerBuild-Windows\BuildWorkflow\SCM_Workflow_Phases_Control.json"
I, [2016-11-29T06:25:56.889947 #4556]  INFO -- default-windows2008r2:     +    if (Test-Path $PhasesControlFile)
I, [2016-11-29T06:25:56.896789 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:56.903651 #4556]  INFO -- default-windows2008r2:     +      $PhasesControlContent = (Get-Content $PhasesControlFile) -join "`n"
I, [2016-11-29T06:25:56.910471 #4556]  INFO -- default-windows2008r2:     +      $PhasesControl=ConvertFrom-Json -InputObject $PhasesControlContent -Verbose
I, [2016-11-29T06:25:56.919293 #4556]  INFO -- default-windows2008r2:     +      if ($PhasesControl."PhaseV".LastScript -eq "None")
I, [2016-11-29T06:25:56.928068 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:56.936875 #4556]  INFO -- default-windows2008r2:     +        # phase 5 has not yet started
I, [2016-11-29T06:25:56.943715 #4556]  INFO -- default-windows2008r2:     +        $uac_enable = "false"
I, [2016-11-29T06:25:56.950578 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:56.957422 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:56.965218 #4556]  INFO -- default-windows2008r2:     +    Write-Output "scm_build_in_progress=$build_in_progress"
I, [2016-11-29T06:25:56.973044 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:56.980859 #4556]  INFO -- default-windows2008r2:     +  publishFact "scm_uac_enable" $uac_enable
I, [2016-11-29T06:25:56.987708 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:56.995523 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:57.002366 #4556]  INFO -- default-windows2008r2:     +  # AWS Tags
I, [2016-11-29T06:25:57.010188 #4556]  INFO -- default-windows2008r2:     +  # *****************************************************************************
I, [2016-11-29T06:25:57.018034 #4556]  INFO -- default-windows2008r2:     +  if ($HostingPlatform -eq 'AWS')
I, [2016-11-29T06:25:57.024852 #4556]  INFO -- default-windows2008r2:     +  {
I, [2016-11-29T06:25:57.031720 #4556]  INFO -- default-windows2008r2:     +    # Backward compatibility
I, [2016-11-29T06:25:57.039519 #4556]  INFO -- default-windows2008r2:     +    publishFact "aws_account" $Account
I, [2016-11-29T06:25:57.048316 #4556]  INFO -- default-windows2008r2:     +    publishFact "aws_appbranch" $AppBranch
I, [2016-11-29T06:25:57.058092 #4556]  INFO -- default-windows2008r2:     +    publishFact "aws_application" $Application
I, [2016-11-29T06:25:57.065919 #4556]  INFO -- default-windows2008r2:     +    publishFact "aws_corebranch" $CoreBranch
I, [2016-11-29T06:25:57.071783 #4556]  INFO -- default-windows2008r2:     +    publishFact "aws_environment" $Environment
I, [2016-11-29T06:25:57.079599 #4556]  INFO -- default-windows2008r2:     +    publishFact "aws_iam_role" $InstanceRole
I, [2016-11-29T06:25:57.088402 #4556]  INFO -- default-windows2008r2:     +    publishFact "aws_instance_id" $InstanceID
I, [2016-11-29T06:25:57.096223 #4556]  INFO -- default-windows2008r2:     +    publishFact "aws_region" $Region
I, [2016-11-29T06:25:57.104044 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:57.112858 #4556]  INFO -- default-windows2008r2:     +    ### Find file of cached SCM tags (if file exists), and examine content
I, [2016-11-29T06:25:57.117732 #4556]  INFO -- default-windows2008r2:     +    $cached_tag_file_path = "C:\ProgramData\PuppetLabs\facter\facts.d"
I, [2016-11-29T06:25:57.125549 #4556]  INFO -- default-windows2008r2:     +    $cached_tag_file_name = "scm_tags"
I, [2016-11-29T06:25:57.130438 #4556]  INFO -- default-windows2008r2:     +    $cached_tag_file = $cached_tag_file_path + "\" + $cached_tag_file_name
I, [2016-11-29T06:25:57.136304 #4556]  INFO -- default-windows2008r2:     +    if (test-path $cached_tag_file) {
I, [2016-11-29T06:25:57.141192 #4556]  INFO -- default-windows2008r2:     +      write-log "Cached tag file $cached_tag_file_name does exist."
I, [2016-11-29T06:25:57.147074 #4556]  INFO -- default-windows2008r2:     +      $cached_tags = $(Get-Content $cached_tag_file | Out-String).ToLower()
I, [2016-11-29T06:25:57.151946 #4556]  INFO -- default-windows2008r2:     +      $cached_tags_line_count = (Get-Content $cached_tag_file | Measure-Object -Line).lines
I, [2016-11-29T06:25:57.157808 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:57.163674 #4556]  INFO -- default-windows2008r2:     +    else
I, [2016-11-29T06:25:57.169539 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:57.173452 #4556]  INFO -- default-windows2008r2:     +      write-log "Cached tag file $cached_tag_file_name does not exist."
I, [2016-11-29T06:25:57.177360 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:57.180312 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:57.183239 #4556]  INFO -- default-windows2008r2:     +    ### Get Tags assigned to this server instance
I, [2016-11-29T06:25:57.185200 #4556]  INFO -- default-windows2008r2:     +    $currentDir = "$JnJFolder\SCM_Facts_Log"
I, [2016-11-29T06:25:57.188116 #4556]  INFO -- default-windows2008r2:     +    if (!(Test-Path "$currentDir")) { new-item "$currentDir" -ItemType Directory }
I, [2016-11-29T06:25:57.191046 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:57.193981 #4556]  INFO -- default-windows2008r2:     +    $scm_tags_file = $currentDir + "\instance_tags.txt"
I, [2016-11-29T06:25:57.196914 #4556]  INFO -- default-windows2008r2:     +    if (-Not (Test-Path $scm_tags_file))
I, [2016-11-29T06:25:57.199848 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:57.202780 #4556]  INFO -- default-windows2008r2:     +      getCreds
I, [2016-11-29T06:25:57.204735 #4556]  INFO -- default-windows2008r2:     +      getTags
I, [2016-11-29T06:25:57.208644 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:57.213532 #4556]  INFO -- default-windows2008r2:     +    if (Test-Path $scm_tags_file)
I, [2016-11-29T06:25:57.216465 #4556]  INFO -- default-windows2008r2:     +    {
I, [2016-11-29T06:25:57.220377 #4556]  INFO -- default-windows2008r2:     +      ### Retrieve Instance Tags and set aws/scm_tag_ facts
I, [2016-11-29T06:25:57.223328 #4556]  INFO -- default-windows2008r2:     +      $reader = [System.IO.File]::OpenText($scm_tags_file)
I, [2016-11-29T06:25:57.226241 #4556]  INFO -- default-windows2008r2:     +      try
I, [2016-11-29T06:25:57.229177 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:57.232128 #4556]  INFO -- default-windows2008r2:     +        for(;;)
I, [2016-11-29T06:25:57.237009 #4556]  INFO -- default-windows2008r2:     +        {
I, [2016-11-29T06:25:57.239927 #4556]  INFO -- default-windows2008r2:     +          $line = $reader.ReadLine()
I, [2016-11-29T06:25:57.242862 #4556]  INFO -- default-windows2008r2:     +          if ($line -eq $null) { break }
I, [2016-11-29T06:25:57.245816 #4556]  INFO -- default-windows2008r2:     +          $lineSplit = $line.Replace("`t", ",").Split(',')
I, [2016-11-29T06:25:57.248749 #4556]  INFO -- default-windows2008r2:     +          $newTag_aws = "aws_tag_" + $lineSplit[1].ToLower()
I, [2016-11-29T06:25:57.251681 #4556]  INFO -- default-windows2008r2:     +          $newTag_scm = "scm_tag_" + $lineSplit[1].ToLower()
I, [2016-11-29T06:25:57.254612 #4556]  INFO -- default-windows2008r2:     +          $newValue   = $lineSplit[4].ToLower()
I, [2016-11-29T06:25:57.257529 #4556]  INFO -- default-windows2008r2:     +          if ($cached_tags -notlike "*$newTag_aws=*")
I, [2016-11-29T06:25:57.260459 #4556]  INFO -- default-windows2008r2:     +          {
I, [2016-11-29T06:25:57.264368 #4556]  INFO -- default-windows2008r2:     +            write-log "Set $newTag_aws to value $newValue (Note: Tag not previously cached)"
I, [2016-11-29T06:25:57.267303 #4556]  INFO -- default-windows2008r2:     +            publishFact $newTag_aws $newValue
I, [2016-11-29T06:25:57.270253 #4556]  INFO -- default-windows2008r2:     +          }
I, [2016-11-29T06:25:57.273171 #4556]  INFO -- default-windows2008r2:     +          else
I, [2016-11-29T06:25:57.276119 #4556]  INFO -- default-windows2008r2:     +          {
I, [2016-11-29T06:25:57.279052 #4556]  INFO -- default-windows2008r2:     +            write-log "This tag ($newTag_aws, with value = $newValue) WAS 1 of the $cached_tags_line_count lines in cached tag file $cached_tag_file_name ($cached_tags), so will NOT update value to $newValue."
I, [2016-11-29T06:25:57.281984 #4556]  INFO -- default-windows2008r2:     +            Write-Output "$newTag=$newValue"
I, [2016-11-29T06:25:57.285876 #4556]  INFO -- default-windows2008r2:     +          }
I, [2016-11-29T06:25:57.289786 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:57.294697 #4556]  INFO -- default-windows2008r2:     +          if ($cached_tags -notlike "*$newTag_scm=*")
I, [2016-11-29T06:25:57.297607 #4556]  INFO -- default-windows2008r2:     +          {
I, [2016-11-29T06:25:57.300542 #4556]  INFO -- default-windows2008r2:     +            write-log "Set $newTag to value $newValue (Note: Tag not previously cached)"
I, [2016-11-29T06:25:57.336713 #4556]  INFO -- default-windows2008r2:     +            publishFact $newTag_scm $newValue
I, [2016-11-29T06:25:57.339646 #4556]  INFO -- default-windows2008r2:     +          }
I, [2016-11-29T06:25:57.342579 #4556]  INFO -- default-windows2008r2:     +          else
I, [2016-11-29T06:25:57.345512 #4556]  INFO -- default-windows2008r2:     +          {
I, [2016-11-29T06:25:57.348445 #4556]  INFO -- default-windows2008r2:     +            write-log "This tag ($newTag_scm, with value = $newValue) WAS 1 of the $cached_tags_line_count lines in cached tag file $cached_tag_file_name ($cached_tags), so will NOT update value to $newValue."
I, [2016-11-29T06:25:57.351397 #4556]  INFO -- default-windows2008r2:     +            write-Output "$newTag_scm=$newValue"
I, [2016-11-29T06:25:57.357264 #4556]  INFO -- default-windows2008r2:     +          }
I, [2016-11-29T06:25:57.370933 #4556]  INFO -- default-windows2008r2:     +        }
I, [2016-11-29T06:25:57.378771 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:57.384620 #4556]  INFO -- default-windows2008r2:     +      finally
I, [2016-11-29T06:25:57.390482 #4556]  INFO -- default-windows2008r2:     +      {
I, [2016-11-29T06:25:57.396368 #4556]  INFO -- default-windows2008r2:     +        $reader.Close()
I, [2016-11-29T06:25:57.402234 #4556]  INFO -- default-windows2008r2:     +      }
I, [2016-11-29T06:25:57.408082 #4556]  INFO -- default-windows2008r2:     +      Remove-Item $scm_tags_file
I, [2016-11-29T06:25:57.415905 #4556]  INFO -- default-windows2008r2:     +    }
I, [2016-11-29T06:25:57.421766 #4556]  INFO -- default-windows2008r2:     +  }
I, [2016-11-29T06:25:57.428629 #4556]  INFO -- default-windows2008r2:     +
I, [2016-11-29T06:25:57.434474 #4556]  INFO -- default-windows2008r2:     +  $datetime = get-date -format "dd-MMM-yyyy HH:mm:ss"
I, [2016-11-29T06:25:57.441318 #4556]  INFO -- default-windows2008r2:     +  write-log "Finished script: $Name_of_This_Script at $datetime $TimeZone"
I, [2016-11-29T06:25:57.446205 #4556]  INFO -- default-windows2008r2:     - change dacl
I, [2016-11-29T06:25:57.453070 #4556]  INFO -- default-windows2008r2:     - change group
I, [2016-11-29T06:25:57.458919 #4556]  INFO -- default-windows2008r2:   * file[C:\ProgramData\PuppetLabs\facter\facts.d\aws_facts.ps1] action delete (up to date)
I, [2016-11-29T06:25:57.464781 #4556]  INFO -- default-windows2008r2: 
I, [2016-11-29T06:25:57.471623 #4556]  INFO -- default-windows2008r2: Running handlers:
I, [2016-11-29T06:25:57.477489 #4556]  INFO -- default-windows2008r2: Running handlers complete
I, [2016-11-29T06:25:57.483355 #4556]  INFO -- default-windows2008r2: Chef Client finished, 4/6 resources updated in 58 seconds
I, [2016-11-29T06:25:58.449249 #4556]  INFO -- default-windows2008r2: Finished converging <default-windows2008r2> (17m33.65s).
